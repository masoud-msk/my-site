{"version":3,"file":"drag.min.js","sources":["../src/utils.ts","../src/Dragger.ts","../src/drag.ts","../src/index.umd.ts"],"sourcesContent":["import { Client, Position } from \"./types\";\nimport { IArrayFormat } from \"@daybrush/utils\";\n\nexport function getPinchDragPosition(\n    clients: Client[],\n    prevClients: Client[],\n    startClients: Client[],\n    startPinchClients: Client[],\n) {\n    const nowCenter = getAverageClient(clients);\n    const prevCenter = getAverageClient(prevClients);\n    const startCenter = getAverageClient(startPinchClients);\n    const pinchClient = plueClient(startPinchClients[0], minusClient(nowCenter, startCenter));\n    const pinchPrevClient = plueClient(startPinchClients[0], minusClient(prevCenter, startCenter));\n\n    return getPosition(pinchClient, pinchPrevClient, startClients[0]);\n}\nexport function isMultiTouch(e: any): e is TouchEvent {\n    return e.touches && e.touches.length >= 2;\n}\nexport function getPositionEvent(e: any): Client[] {\n    if (e.touches) {\n        return getClients(e.touches);\n    } else {\n        return [getClient(e)];\n    }\n}\nexport function getPosition(client: Client, prevClient: Client, startClient: Client): Position {\n    const { clientX, clientY } = client;\n    const {\n        clientX: prevX,\n        clientY: prevY,\n    } = prevClient;\n\n    const {\n        clientX: startX,\n        clientY: startY,\n    } = startClient;\n    const deltaX = clientX - prevX;\n    const deltaY = clientY - prevY;\n    const distX = clientX - startX;\n    const distY = clientY - startY;\n\n    return {\n        clientX,\n        clientY,\n        deltaX,\n        deltaY,\n        distX,\n        distY,\n    };\n}\nexport function getDist(clients: Client[]) {\n    return Math.sqrt(\n        Math.pow(clients[0].clientX - clients[1].clientX, 2)\n        + Math.pow(clients[0].clientY - clients[1].clientY, 2),\n    );\n}\nexport function getPositions(clients: Client[], prevClients: Client[], startClients: Client[]): Position[] {\n    return clients.map((client, i) => getPosition(client, prevClients[i], startClients[i]));\n}\nexport function getClients(touches: IArrayFormat<Touch>) {\n    const length = Math.min(touches.length, 2);\n    const clients = [];\n\n    for (let i = 0; i < length; ++i) {\n        clients.push(getClient(touches[i]));\n    }\n    return clients;\n}\nexport function getClient(e: MouseEvent | Touch): Client {\n    return {\n        clientX: e.clientX,\n        clientY: e.clientY,\n    };\n}\nexport function getAverageClient(clients: Client[]) {\n    if (clients.length === 1) {\n        return clients[0];\n    }\n    return {\n        clientX: (clients[0].clientX + clients[1].clientX) / 2,\n        clientY: (clients[0].clientY + clients[1].clientY) / 2,\n    };\n}\nexport function plueClient(client1: Client, client2: Client) {\n    return {\n        clientX: (client1.clientX + client2.clientX),\n        clientY: (client1.clientY + client2.clientY),\n    };\n}\n\nexport function minusClient(client1: Client, client2: Client) {\n    return {\n        clientX: (client1.clientX - client2.clientX),\n        clientY: (client1.clientY - client2.clientY),\n    };\n}\n","import { DragOptions, Client, Position, OnDrag } from \"./types\";\nimport {\n    getPositionEvent, getPosition, getClients, getPositions,\n    isMultiTouch, getPinchDragPosition, getAverageClient, getDist,\n} from \"./utils\";\nimport { addEvent, removeEvent, now } from \"@daybrush/utils\";\n\n/**\n * You can set up drag events in any browser.\n */\nclass Dragger {\n    public options: DragOptions = {};\n    private flag = false;\n    private pinchFlag = false;\n    private datas = {};\n    private isDrag = false;\n    private isPinch = false;\n    private isMouse = false;\n    private isTouch = false;\n    private prevClients: Client[] = [];\n    private startClients: Client[] = [];\n    private movement: number = 0;\n    private startPinchClients: Client[] = [];\n    private startDistance: number = 0;\n    private customDist = [0, 0];\n    private targets: Array<Element | Window> = [];\n    private prevTime: number = 0;\n    private isDouble: boolean = false;\n    /**\n     *\n     */\n    constructor(targets: Array<Element | Window> | Element | Window, options: DragOptions = {}) {\n        const elements = [].concat(targets as any) as Array<Element | Window> ;\n        this.options = {\n            container: elements.length > 1 ? window : elements[0],\n            preventRightClick: true,\n            preventDefault: true,\n            pinchThreshold: 0,\n            events: [\"touch\", \"mouse\"],\n            ...options,\n        };\n\n        const { container, events } = this.options;\n\n        this.isTouch = events!.indexOf(\"touch\") > -1;\n        this.isMouse = events!.indexOf(\"mouse\") > -1;\n        this.customDist = [0, 0];\n        this.targets = elements;\n\n        if (this.isMouse) {\n            elements.forEach(el => {\n                addEvent(el, \"mousedown\", this.onDragStart);\n            });\n            addEvent(container!, \"mousemove\", this.onDrag);\n            addEvent(container!, \"mouseup\", this.onDragEnd);\n            addEvent(container!, \"contextmenu\", this.onDragEnd);\n        }\n        if (this.isTouch) {\n            const passive = {\n                passive: false,\n            };\n            elements.forEach(el => {\n                addEvent(el, \"touchstart\", this.onDragStart, passive);\n            });\n            addEvent(container!, \"touchmove\", this.onDrag, passive);\n            addEvent(container!, \"touchend\", this.onDragEnd, passive);\n            addEvent(container!, \"touchcancel\", this.onDragEnd, passive);\n        }\n    }\n    /**\n     *\n     */\n    public isDragging() {\n        return this.isDrag;\n    }\n    /**\n     *\n     */\n    public isFlag() {\n        return this.flag;\n    }\n    /**\n     *\n     */\n    public isPinchFlag() {\n        return this.pinchFlag;\n    }\n    /**\n     *\n     */\n    public isPinching() {\n        return this.isPinch;\n    }\n    /**\n     *\n     */\n    public scrollBy(deltaX: number, deltaY: number, e: any, isCallDrag: boolean = true) {\n        if (!this.flag) {\n            return;\n        }\n        this.startClients.forEach(client => {\n            client.clientX -= deltaX;\n            client.clientY -= deltaY;\n        });\n        this.prevClients.forEach(client => {\n            client.clientX -= deltaX;\n            client.clientY -= deltaY;\n        });\n        isCallDrag && this.onDrag(e, true);\n    }\n    /**\n     * @method\n     */\n    public onDragStart = (e: any) => {\n        if (!this.flag && e.cancelable === false) {\n            return;\n        }\n        const { container, pinchOutside, dragstart, preventRightClick, preventDefault } = this.options;\n        const isTouch = this.isTouch;\n\n        if (!this.flag && isTouch && pinchOutside) {\n            setTimeout(() => {\n                addEvent(container!, \"touchstart\", this.onDragStart);\n            });\n        }\n        if (this.flag && isTouch && pinchOutside) {\n            removeEvent(container!, \"touchstart\", this.onDragStart);\n        }\n        if (isMultiTouch(e)) {\n            if (!this.flag && (e.touches.length !== e.changedTouches.length)) {\n                return;\n            }\n            if (!this.pinchFlag) {\n                this.onPinchStart(e);\n            }\n        }\n        if (this.flag) {\n            return;\n        }\n        const clients = this.startClients[0] ? this.startClients : getPositionEvent(e);\n\n        this.customDist = [0, 0];\n        this.flag = true;\n        this.isDrag = false;\n        this.startClients = clients;\n        this.prevClients = clients;\n        this.datas = {};\n        this.movement = 0;\n\n        const position = getPosition(clients[0], this.prevClients[0], this.startClients[0]);\n\n        if (\n            (preventRightClick && (e.which === 3 || e.button === 2))\n            || (dragstart && dragstart({\n                type: \"dragstart\",\n                datas: this.datas,\n                inputEvent: e,\n                ...position,\n            })) === false) {\n            this.startClients = [];\n            this.prevClients = [];\n            this.flag = false;\n        }\n        this.isDouble = now() - this.prevTime < 200;\n        this.flag && preventDefault && e.preventDefault();\n    }\n    public onDrag = (e: any, isScroll?: boolean) => {\n        if (!this.flag) {\n            return;\n        }\n        const clients = getPositionEvent(e);\n\n        if (this.pinchFlag) {\n            this.onPinch(e, clients);\n        }\n        const result = this.move([0, 0], e, clients);\n\n        if (!result || (!result.deltaX && !result.deltaY)) {\n            return;\n        }\n        const drag = this.options.drag;\n\n        drag && drag({\n            ...result,\n            isScroll: !!isScroll,\n            inputEvent: e,\n        });\n    }\n    public move([deltaX, deltaY]: number[], inputEvent: any, clients = this.prevClients): OnDrag | undefined {\n        const customDist = this.customDist;\n        const prevClients = this.prevClients;\n        const startClients = this.startClients;\n        const position: Position = this.pinchFlag\n            ? getPinchDragPosition(clients, prevClients, startClients, this.startPinchClients)\n            : getPosition(clients[0], prevClients[0], startClients[0]);\n\n        customDist[0] += deltaX;\n        customDist[1] += deltaY;\n        position.deltaX += deltaX;\n        position.deltaY += deltaY;\n\n        const {\n            deltaX: positionDeltaX,\n            deltaY: positionDeltaY,\n        } = position;\n\n        position.distX += customDist[0];\n        position.distY += customDist[1];\n\n        this.movement += Math.sqrt(positionDeltaX * positionDeltaX + positionDeltaY * positionDeltaY);\n        this.prevClients = clients;\n        this.isDrag = true;\n\n        return {\n            type: \"drag\",\n            datas: this.datas,\n            ...position,\n            movement: this.movement,\n            isDrag: this.isDrag,\n            isPinch: this.isPinch,\n            isScroll: false,\n            inputEvent,\n        };\n    }\n    public onDragEnd = (e: any) => {\n        if (!this.flag) {\n            return;\n        }\n        const { dragend, pinchOutside, container } = this.options;\n        if (this.isTouch && pinchOutside) {\n            removeEvent(container!, \"touchstart\", this.onDragStart);\n        }\n        if (this.pinchFlag) {\n            this.onPinchEnd(e);\n        }\n        this.flag = false;\n\n        const prevClients = this.prevClients;\n        const startClients = this.startClients;\n\n        const position: Position = this.pinchFlag\n            ? getPinchDragPosition(prevClients, prevClients, startClients, this.startPinchClients)\n            : getPosition(prevClients[0], prevClients[0], startClients[0]);\n\n        const currentTime = now();\n        const isDouble = !this.isDrag && this.isDouble;\n\n        this.prevTime = this.isDrag || isDouble ? 0 : currentTime;\n        this.startClients = [];\n        this.prevClients = [];\n\n        dragend && dragend({\n            type: \"dragend\",\n            datas: this.datas,\n            isDouble,\n            isDrag: this.isDrag,\n            inputEvent: e,\n            ...position,\n        });\n    }\n    public onPinchStart(e: TouchEvent) {\n        const { pinchstart, pinchThreshold } = this.options;\n\n        if (this.isDrag && this.movement > pinchThreshold!) {\n            return;\n        }\n        const pinchClients = getClients(e.changedTouches);\n\n        this.pinchFlag = true;\n        this.startClients.push(...pinchClients);\n        this.prevClients.push(...pinchClients);\n        this.startDistance = getDist(this.prevClients);\n        this.startPinchClients = [...this.prevClients];\n\n        if (!pinchstart) {\n            return;\n        }\n        const startClients = this.prevClients;\n        const startAverageClient = getAverageClient(startClients);\n        const centerPosition = getPosition(\n            startAverageClient,\n            startAverageClient,\n            startAverageClient,\n        );\n        pinchstart({\n            type: \"pinchstart\",\n            datas: this.datas,\n            touches: getPositions(startClients, startClients, startClients),\n            ...centerPosition,\n            inputEvent: e,\n        });\n    }\n    public onPinch(e: TouchEvent, clients: Client[]) {\n        if (!this.flag || !this.pinchFlag || clients.length < 2) {\n            return;\n        }\n        this.isPinch = true;\n\n        const pinch = this.options.pinch;\n        if (!pinch) {\n            return;\n        }\n        const prevClients = this.prevClients;\n        const startClients = this.startClients;\n        const centerPosition = getPosition(\n            getAverageClient(clients),\n            getAverageClient(prevClients),\n            getAverageClient(startClients),\n        );\n        const distance = getDist(clients);\n        pinch({\n            type: \"pinch\",\n            datas: this.datas,\n            movement: this.movement,\n            touches: getPositions(clients, prevClients, startClients),\n            scale: distance / this.startDistance,\n            distance,\n            ...centerPosition,\n            inputEvent: e,\n        });\n    }\n    public onPinchEnd(e: TouchEvent) {\n        if (!this.flag || !this.pinchFlag) {\n            return;\n        }\n        const isPinch = this.isPinch;\n\n        this.isPinch = false;\n        this.pinchFlag = false;\n        const pinchend = this.options.pinchend;\n\n        if (!pinchend) {\n            return;\n        }\n        const prevClients = this.prevClients;\n        const startClients = this.startClients;\n        const centerPosition = getPosition(\n            getAverageClient(prevClients),\n            getAverageClient(prevClients),\n            getAverageClient(startClients),\n        );\n        pinchend({\n            type: \"pinchend\",\n            datas: this.datas,\n            isPinch,\n            touches: getPositions(prevClients, prevClients, startClients),\n            ...centerPosition,\n            inputEvent: e,\n        });\n        this.isPinch = false;\n        this.pinchFlag = false;\n    }\n    /**\n     *\n     */\n    public unset() {\n        const targets = this.targets;\n        const container = this.options.container!;\n\n        if (this.isMouse) {\n            targets.forEach(target => {\n                removeEvent(target, \"mousedown\", this.onDragStart);\n            });\n            removeEvent(container, \"mousemove\", this.onDrag);\n            removeEvent(container, \"mouseup\", this.onDragEnd);\n            removeEvent(container, \"contextmenu\", this.onDragEnd);\n        }\n        if (this.isTouch) {\n            targets.forEach(target => {\n                removeEvent(target, \"touchstart\", this.onDragStart);\n            });\n            removeEvent(container, \"touchstart\", this.onDragStart);\n            removeEvent(container, \"touchmove\", this.onDrag);\n            removeEvent(container, \"touchend\", this.onDragEnd);\n            removeEvent(container, \"touchcancel\", this.onDragEnd);\n        }\n    }\n}\n\nexport default Dragger;\n","import Dragger from \"./Dragger\";\nimport { DragOptions } from \"./types\";\n\nexport default function setDrag(el: Element, options: DragOptions) {\n    return new Dragger(el, options);\n}\n","\nimport Dragger, * as modules from \"./index\";\n\nfor (const name in modules) {\n    (Dragger as any)[name] = (modules as any)[name];\n}\n\nexport default Dragger;\n"],"names":["getPinchDragPosition","clients","prevClients","startClients","startPinchClients","nowCenter","getAverageClient","prevCenter","startCenter","getPosition","plueClient","minusClient","getPositionEvent","e","touches","getClients","getClient","client","prevClient","startClient","clientX","clientY","deltaX","deltaY","distX","distY","getDist","Math","sqrt","pow","getPositions","map","i","length","min","push","client1","client2","targets","options","_this","flag","cancelable","_a","container","pinchOutside","dragstart","preventRightClick","preventDefault","isTouch","setTimeout","addEvent","onDragStart","removeEvent","isMultiTouch","changedTouches","pinchFlag","onPinchStart","customDist","isDrag","datas","position","movement","which","button","type","inputEvent","isDouble","now","prevTime","isScroll","onPinch","result","move","drag","dragend","onPinchEnd","currentTime","elements","concat","window","pinchThreshold","events","indexOf","isMouse","this","forEach","el","onDrag","onDragEnd","passive_1","passive","isPinch","isCallDrag","positionDeltaX","positionDeltaY","_c","pinchstart","pinchClients","_b","startDistance","startAverageClient","centerPosition","pinch","distance","scale","pinchend","target","Dragger","name","modules"],"mappings":"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"}