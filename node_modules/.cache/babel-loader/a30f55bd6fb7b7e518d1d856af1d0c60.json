{"remainingRequest":"/home/sjd/Desktop/my-site/node_modules/babel-loader/lib/index.js!/home/sjd/Desktop/my-site/node_modules/eslint-loader/index.js??ref--13-0!/home/sjd/Desktop/my-site/src/mixins/handle.js","dependencies":[{"path":"/home/sjd/Desktop/my-site/src/mixins/handle.js","mtime":1598999993622},{"path":"/home/sjd/Desktop/my-site/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/sjd/Desktop/my-site/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/sjd/Desktop/my-site/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/home/sjd/Desktop/my-site/src/mixins/handle.js"],"names":["getOpts","createStderr","createDummyStdout","provide","terminate","methods","handle","stdin","program","trim","split","commands","Promise","resolve","execute","builtIn","commandNotFound","parserOptions","_","component","tokens","tokenPairs","tokenPairsExpression","exec","push","accommodatedTokens","isNextTokenOptionValue","forEach","token","index","endsWith","parsed","setupComponent","local","history","length","executed","Set","add","$emit","setExecuted","setPointer","size","emitExecute","setIsInProgress","setHistory","notFound","entries","hasOwnProperty","call","computed","cursor","pointer","environment","isExecuting","isInProgress","isFullscreen","context","setStdin","setIsFullscreen"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,OAAP,MAAoB,SAApB;AAEA,SAASC,YAAT,EAAuBC,iBAAvB,QAAgD,YAAhD,C,CAEA;;AACA,eAAe;AACbC,EAAAA,OADa,qBACF;AACT,WAAO;AACLC,MAAAA,SAAS,EAAE,KAAKA;AADX,KAAP;AAGD,GALY;AAObC,EAAAA,OAAO,EAAE;AACP;AACMC,IAAAA,MAFC,kBAEOC,KAFP,EAEc;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACnB;AACMC,gBAAAA,OAFa,GAEHD,KAAK,CAACE,IAAN,GAAaC,KAAb,CAAmB,GAAnB,EAAwB,CAAxB,CAFG,EAInB;;AAJmB,sBAKf,OAAO,KAAI,CAACC,QAAL,CAAcH,OAAd,CAAP,KAAkC,UALnB;AAAA;AAAA;AAAA;;AAAA;AAAA,uBAOXI,OAAO,CAACC,OAAR,CAAgB,KAAI,CAACC,OAAL,CAAaP,KAAb,CAAhB,CAPW;;AAAA;AAAA;;AAAA;AAAA,sBAaf,OAAO,KAAI,CAACQ,OAAZ,KAAwB,UAbT;AAAA;AAAA;AAAA;;AAAA;AAAA,uBAcXH,OAAO,CAACC,OAAR,CAAgB,KAAI,CAACE,OAAL,CAAaR,KAAb,EAAoB,KAApB,CAAhB,CAdW;;AAAA;AAAA;;AAAA;AAoBnB;AACA,gBAAA,KAAI,CAACS,eAAL,CAAqBT,KAArB;;AArBmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAsBpB,KAxBM;AA0BP;AACMO,IAAAA,OA3BC,mBA2BQP,KA3BR,EA2Be;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACpB;AACAA,gBAAAA,KAAK,GAAGA,KAAK,CAACE,IAAN,EAAR;AAEMD,gBAAAA,OAJc,GAIJR,OAAO,CAACO,KAAK,CAACG,KAAN,CAAY,GAAZ,CAAD,EAAmB,MAAI,CAACO,aAAxB,CAAP,CAA8CC,CAA9C,CAAgD,CAAhD,CAJI,EAKpB;;AACIC,gBAAAA,SANgB,GAMJjB,iBAAiB,EANb,EAQpB;AACA;AACA;;AACMkB,gBAAAA,MAXc,GAWL,EAXK,EAYpB;;AACIC,gBAAAA,UAbgB,GAaH,EAbG;AAcdC,gBAAAA,oBAdc,GAcS,qBAdT,EAepB;;AACA,mBAAG;AACDD,kBAAAA,UAAU,GAAGC,oBAAoB,CAACC,IAArB,CAA0BhB,KAA1B,CAAb;;AAEA,sBAAIc,UAAU,IAAI,IAAlB,EAAwB;AACtBD,oBAAAA,MAAM,CAACI,IAAP,CAAYH,UAAU,CAAC,CAAD,CAAV,GAAgBA,UAAU,CAAC,CAAD,CAA1B,GAAgCA,UAAU,CAAC,CAAD,CAAtD;AACD;AACF,iBAND,QAMSA,UAAU,IAAI,IANvB,EAhBoB,CAwBpB;;;AACMI,gBAAAA,kBAzBc,GAyBO,EAzBP;AA0BhBC,gBAAAA,sBA1BgB,GA0BS,KA1BT;AA2BpBN,gBAAAA,MAAM,CAACO,OAAP,CAAe,UAACC,KAAD,EAAQC,KAAR,EAAkB;AAC/B;AACA,sBAAIH,sBAAJ,EAA4B;AAC1BA,oBAAAA,sBAAsB,GAAG,KAAzB;AAEA;AACD,mBAN8B,CAQ/B;;;AACA,sBAAIE,KAAK,CAACE,QAAN,CAAe,GAAf,CAAJ,EAAyB;AACvB;AACAL,oBAAAA,kBAAkB,CAACD,IAAnB,CAAwBI,KAAK,GAAGR,MAAM,CAACS,KAAK,GAAG,CAAT,CAAtC;AAEAH,oBAAAA,sBAAsB,GAAG,IAAzB;AACD,mBALD,MAKO;AACL;AACAD,oBAAAA,kBAAkB,CAACD,IAAnB,CAAwBI,KAAxB;AACD;AACF,iBAlBD;AAoBMG,gBAAAA,MA/Cc,GA+CL/B,OAAO,CAACyB,kBAAD,EAAqB,MAAI,CAACR,aAA1B,CA/CF;AAAA;AAAA,uBAiDFL,OAAO,CAACC,OAAR,CAAgB,MAAI,CAACF,QAAL,CAAcH,OAAd,EAAuBuB,MAAvB,CAAhB,CAjDE;;AAAA;AAiDpBZ,gBAAAA,SAjDoB;AAkDpBA,gBAAAA,SAAS,GAAG,MAAI,CAACa,cAAL,CAAoBb,SAApB,EAA+B,MAAI,CAACc,KAAL,CAAWC,OAAX,CAAmBC,MAAlD,EAA0DJ,MAA1D,CAAZ,CAlDoB,CAoDpB;;AACA,oBAAIxB,KAAK,KAAK,EAAd,EAAkB;AAChB;AACM6B,kBAAAA,QAFU,GAEC,IAAIC,GAAJ,CAAQ,MAAI,CAACJ,KAAL,CAAWG,QAAnB,CAFD;AAGhBA,kBAAAA,QAAQ,UAAR,CAAgB7B,KAAhB;AACA6B,kBAAAA,QAAQ,CAACE,GAAT,CAAa/B,KAAb,EAJgB,CAMhB;;AACA,kBAAA,MAAI,CAACgC,KAAL,CAAW,iBAAX,EAA8BH,QAA9B;;AACA,kBAAA,MAAI,CAACI,WAAL,CAAiBJ,QAAjB;AACD,iBA9DmB,CAgEpB;;;AACA,gBAAA,MAAI,CAACK,UAAL,CAAgB,MAAI,CAACR,KAAL,CAAWG,QAAX,CAAoBM,IAApC;;AAEMR,gBAAAA,OAnEc,sBAmEA,MAAI,CAACD,KAAL,CAAWC,OAnEX;AAoEpBA,gBAAAA,OAAO,CAACV,IAAR,CAAaL,SAAb,EApEoB,CAsEpB;;AACA,gBAAA,MAAI,CAACwB,WAAL,GAvEoB,CAwEpB;;;AACA,gBAAA,MAAI,CAACC,eAAL,CAAqB,IAArB;;AAEA,gBAAA,MAAI,CAACC,UAAL,CAAgBX,OAAhB,EA3EoB,CA4EpB;;;AACA,gBAAA,MAAI,CAACK,KAAL,CAAW,gBAAX,qBAAiCL,OAAjC;;AA7EoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA8ErB,KAzGM;AA2GP;AACAlB,IAAAA,eA5GO,2BA4GUT,KA5GV,EA4GiB;AACtB,UAAIY,SAAS,GAAGjB,iBAAiB,EAAjC,CADsB,CAEtB;;AACA,UAAIK,KAAK,KAAK,EAAd,EAAkB;AAChB;AACAY,QAAAA,SAAS,GAAGlB,YAAY,WAAIM,KAAJ,eAAc,KAAKuC,QAAnB,GAA+B,IAA/B,CAAxB;AACA3B,QAAAA,SAAS,GAAG,KAAKa,cAAL,CAAoBb,SAApB,EAA+B,KAAKc,KAAL,CAAWC,OAAX,CAAmBC,MAAlD,CAAZ,CAHgB,CAKhB;;AACA,YAAMC,QAAQ,GAAG,IAAIC,GAAJ,CAAQ,KAAKJ,KAAL,CAAWG,QAAnB,CAAjB;AACAA,QAAAA,QAAQ,UAAR,CAAgB7B,KAAhB;AACA6B,QAAAA,QAAQ,CAACE,GAAT,CAAa/B,KAAb,EARgB,CAUhB;;AACA,aAAKgC,KAAL,CAAW,iBAAX,EAA8BH,QAA9B;AACA,aAAKI,WAAL,CAAiBJ,QAAjB,EAZgB,CAchB;;AACA,aAAKK,UAAL,CAAgB,KAAKR,KAAL,CAAWG,QAAX,CAAoBM,IAApC;AACD;;AAED,UAAMR,OAAO,sBAAO,KAAKD,KAAL,CAAWC,OAAlB,CAAb;;AACAA,MAAAA,OAAO,CAACV,IAAR,CAAaL,SAAb,EAtBsB,CAwBtB;;AACA,WAAKwB,WAAL,GAzBsB,CA0BtB;;AACA,WAAKC,eAAL,CAAqB,IAArB;AAEA,WAAKC,UAAL,CAAgBX,OAAhB,EA7BsB,CA8BtB;;AACA,WAAKK,KAAL,CAAW,gBAAX,qBAAiCL,OAAjC;AACD,KA5IM;AA8IP;AACAF,IAAAA,cA/IO,0BA+ISb,SA/IT,EA+I8C;AAAA;;AAAA,UAA1B4B,OAA0B,uEAAhB,CAAgB;AAAA,UAAbhB,MAAa,uEAAJ,EAAI;AACnD;AACAZ,MAAAA,SAAS,qBAAQA,SAAR,CAAT;;AAEA,UAAI,CAAC6B,cAAc,CAACC,IAAf,CAAoB9B,SAApB,EAA+B,UAA/B,CAAL,EAAiD;AAC/CA,QAAAA,SAAS,CAAC+B,QAAV,GAAqB,EAArB;AACD,OANkD,CAOnD;;;AACA,UAAMC,MAAM,GAAG,KAAKlB,KAAL,CAAWkB,MAA1B;AACA,UAAMf,QAAQ,GAAG,IAAIC,GAAJ,CAAQ,KAAKJ,KAAL,CAAWG,QAAnB,CAAjB;;AACA,UAAMF,OAAO,sBAAO,KAAKD,KAAL,CAAWC,OAAlB,CAAb;;AACA,UAAMkB,OAAO,GAAG,KAAKnB,KAAL,CAAWmB,OAA3B;AACA,UAAM7C,KAAK,GAAG,KAAK0B,KAAL,CAAW1B,KAAzB;AACAY,MAAAA,SAAS,CAAC+B,QAAV;AACEG,QAAAA,WAAW,EAAE;AAAA,iBAAO;AAClBC,YAAAA,WAAW,EAAE,MAAI,CAACrB,KAAL,CAAWsB,YAAX,IAA4B,MAAI,CAACtB,KAAL,CAAWC,OAAX,CAAmBC,MAAnB,GAA4B,CAA5B,KAAkCY,OADzD;AAElBS,YAAAA,YAAY,EAAE,MAAI,CAACvB,KAAL,CAAWuB,YAFP;AAGlBD,YAAAA,YAAY,EAAE,MAAI,CAACtB,KAAL,CAAWsB;AAHP,WAAP;AAAA,SADf;AAOEE,QAAAA,OAAO,EAAE;AAAA,iBAAO;AACdN,YAAAA,MAAM,EAANA,MADc;AAEdf,YAAAA,QAAQ,EAARA,QAFc;AAGdF,YAAAA,OAAO,EAAPA,OAHc;AAIdH,YAAAA,MAAM,EAANA,MAJc;AAKdqB,YAAAA,OAAO,EAAPA,OALc;AAMd7C,YAAAA,KAAK,EAALA;AANc,WAAP;AAAA;AAPX,SAgBKY,SAAS,CAAC+B,QAhBf;AAmBA,aAAO/B,SAAP;AACD,KAhLM;AAkLP;AACAf,IAAAA,SAnLO,uBAmLM;AACX;AACA,WAAKsD,QAAL,CAAc,EAAd,EAFW,CAGX;;AACA,WAAKC,eAAL,CAAqB,KAArB,EAJW,CAKX;;AACA,WAAKpB,KAAL,CAAW,UAAX,EANW,CAOX;;AACA,WAAKK,eAAL,CAAqB,KAArB;AACD;AA5LM;AAPI,CAAf","sourcesContent":["import getOpts from 'getopts'\n\nimport { createStderr, createDummyStdout } from '../library'\n\n// @vue/component\nexport default {\n  provide () {\n    return {\n      terminate: this.terminate\n    }\n  },\n\n  methods: {\n    // Handles the command\n    async handle (stdin) {\n      // First token is program\n      const program = stdin.trim().split(' ')[0]\n\n      // Check if command is regular command\n      if (typeof this.commands[program] === 'function') {\n        // Check if command is regular command\n        await Promise.resolve(this.execute(stdin))\n\n        return\n      }\n\n      // Check if command might be built-in\n      if (typeof this.builtIn === 'function') {\n        await Promise.resolve(this.builtIn(stdin, this))\n\n        // The built in function must take care of all other steps\n        return\n      }\n\n      // Command must be empty or can't be found\n      this.commandNotFound(stdin)\n    },\n\n    // Executes a regular command\n    async execute (stdin) {\n      // Remove leading and trailing whitespace\n      stdin = stdin.trim()\n\n      const program = getOpts(stdin.split(' '), this.parserOptions)._[0]\n      // Create empty component in case no program has been found\n      let component = createDummyStdout()\n\n      // Split Stdin into chunks to parse it correctly.\n      // See: https://stackoverflow.com/a/18647776 and see: https://github.com/ndabAP/vue-command/issues/176\n      // Contains the tokens to merge option-value pairs\n      const tokens = []\n      // Contains the current token pair for each iteration\n      let tokenPairs = []\n      const tokenPairsExpression = /[^\\s\"]+|\"([^\"]*)\"/gi\n      // Iterate through all tokens\n      do {\n        tokenPairs = tokenPairsExpression.exec(stdin)\n\n        if (tokenPairs != null) {\n          tokens.push(tokenPairs[1] ? tokenPairs[1] : tokenPairs[0])\n        }\n      } while (tokenPairs != null)\n\n      // Contains accommodated tokens to parse\n      const accommodatedTokens = []\n      let isNextTokenOptionValue = false\n      tokens.forEach((token, index) => {\n        // Check if next token is option value\n        if (isNextTokenOptionValue) {\n          isNextTokenOptionValue = false\n\n          return\n        }\n\n        // Check if option has value assigned\n        if (token.endsWith('=')) {\n          // Merge option with value\n          accommodatedTokens.push(token + tokens[index + 1])\n\n          isNextTokenOptionValue = true\n        } else {\n          // Token is not part of option-value pair\n          accommodatedTokens.push(token)\n        }\n      })\n\n      const parsed = getOpts(accommodatedTokens, this.parserOptions)\n\n      component = await Promise.resolve(this.commands[program](parsed))\n      component = this.setupComponent(component, this.local.history.length, parsed)\n\n      // Disallow empty Stdin in history\n      if (stdin !== '') {\n        // Remove duplicate commands to push to latest entry\n        const executed = new Set(this.local.executed)\n        executed.delete(stdin)\n        executed.add(stdin)\n\n        // Mutate property\n        this.$emit('update:executed', executed)\n        this.setExecuted(executed)\n      }\n\n      // Point history to new command\n      this.setPointer(this.local.executed.size)\n\n      const history = [...this.local.history]\n      history.push(component)\n\n      // Emit command executing started\n      this.emitExecute()\n      // Tell terminal there is a command in progress\n      this.setIsInProgress(true)\n\n      this.setHistory(history)\n      // Update the history property\n      this.$emit('update:history', [...history])\n    },\n\n    // Command is empty or not found\n    commandNotFound (stdin) {\n      let component = createDummyStdout()\n      // Only non empty commands should be\n      if (stdin !== '') {\n        // No command found\n        component = createStderr(`${stdin}: ${this.notFound}`, true)\n        component = this.setupComponent(component, this.local.history.length)\n\n        // Remove duplicate commands to push to latest entry\n        const executed = new Set(this.local.executed)\n        executed.delete(stdin)\n        executed.add(stdin)\n\n        // Mutate property\n        this.$emit('update:executed', executed)\n        this.setExecuted(executed)\n\n        // Point history to new command\n        this.setPointer(this.local.executed.size)\n      }\n\n      const history = [...this.local.history]\n      history.push(component)\n\n      // Emit command executing started\n      this.emitExecute()\n      // Tell terminal there is a command in progress\n      this.setIsInProgress(true)\n\n      this.setHistory(history)\n      // Update the history property\n      this.$emit('update:history', [...history])\n    },\n\n    // Add environment and context and instantly terminate\n    setupComponent (component, entries = 0, parsed = {}) {\n      // Prevent to work with same reference\n      component = { ...component }\n\n      if (!hasOwnProperty.call(component, 'computed')) {\n        component.computed = {}\n      }\n      // Create copies\n      const cursor = this.local.cursor\n      const executed = new Set(this.local.executed)\n      const history = [...this.local.history]\n      const pointer = this.local.pointer\n      const stdin = this.local.stdin\n      component.computed = {\n        environment: () => ({\n          isExecuting: this.local.isInProgress && (this.local.history.length - 1 === entries),\n          isFullscreen: this.local.isFullscreen,\n          isInProgress: this.local.isInProgress\n        }),\n\n        context: () => ({\n          cursor,\n          executed,\n          history,\n          parsed,\n          pointer,\n          stdin\n        }),\n\n        ...component.computed\n      }\n\n      return component\n    },\n\n    // Executes common final tasks after command has been finished\n    terminate () {\n      // Set new Stdin to empty\n      this.setStdin('')\n      // Exit fullscreen if necessary\n      this.setIsFullscreen(false)\n      // Indicate end of command\n      this.$emit('executed')\n      // Allow new Stdin\n      this.setIsInProgress(false)\n    }\n  }\n}\n"]}]}