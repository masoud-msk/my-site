{"remainingRequest":"/home/sjd/Desktop/my-site/vue-site/node_modules/babel-loader/lib/index.js!/home/sjd/Desktop/my-site/vue-site/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/sjd/Desktop/my-site/vue-site/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/sjd/Desktop/my-site/vue-site/src/hosted/App.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/sjd/Desktop/my-site/vue-site/src/hosted/App.vue","mtime":1599147995379},{"path":"/home/sjd/Desktop/my-site/vue-site/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/sjd/Desktop/my-site/vue-site/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/sjd/Desktop/my-site/vue-site/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/sjd/Desktop/my-site/vue-site/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["App.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <main>\n    <vue-command\n      :autocompletion-resolver=\"autocompletionResolver\"\n      :built-in=\"builtIn\"\n      :commands=\"commands\"\n      :cursor.sync=\"cursor\"\n      :history.sync=\"history\"\n      :help-timeout=\"1250\"\n      :prompt=\"prompt\"\n      :stdin.sync=\"stdin\"\n      show-help></vue-command>\n  </main>\n</template>\n\n<script>\nimport ChuckNorris from './ChuckNorris'\nimport Party from './Party'\nimport NanoEditor from './NanoEditor'\nimport VueCommand from '../components/VueCommand'\nimport { createStdout, createStderr, createDummyStdout } from '../library'\n\nconst PROMPT = 'sjd@quantum:~$'\nconst PROMPTDIR = (DIR) => {\n  return `sjd@quantum:~${DIR}$`\n}\n\nexport default {\n  components: {\n    VueCommand\n  },\n\n  data: () => ({\n    autocompletionResolver: () => undefined,\n    builtIn: undefined,\n    commands: {\n      // list Directory\n      ls: undefined,\n\n      // exit the terminal\n      exit: undefined,\n\n      // Navigate to home, self and back\n      cd: undefined,\n\n      // Clear terminals history\n      clear: undefined,\n\n      // Returns the parsed object to test parsing\n      // E. g.: echo --x=\"one two three\" --y=\"one two\" --z=\"one\" --test=\"okay\" --x1 --y2 --t=ok -dash\n      // echo: (_) => createStdout(JSON.stringify(_, null, 2)),\n\n      // Show help\n      help: () =>\n        createStdout(`\n        &nbsp;cd [dir]<br>\n        &nbsp;clear<br>\n        &nbsp;exit<br>\n        &nbsp;echo<br>\n        &nbsp;sjd<br>\n        &nbsp;hello-world<br>\n        &nbsp;norris<br>\n        &nbsp;nano<br>\n      `),\n\n      // Return simple text\n      'hello-world': () => createStdout('Hello world'),\n\n      // Show a animation\n      sjd: () => Party,\n\n      // Nano editor available in many shells\n      nano: () => NanoEditor,\n\n      // Return a Chuck Norris joke\n      norris: () => ChuckNorris,\n\n      // Show current path\n      pwd: () => undefined\n    },\n\n    // Terminal cursor position\n    cursor: 0,\n    history: [],\n    options: {\n      long: {\n        pokedex: ['color'],\n        loading: ['amount', 'timeout']\n      },\n\n      short: {\n        pokedex: ['h']\n      }\n    },\n\n    prompt: PROMPT,\n    stdin: ''\n  }),\n\n  created () {\n    this.commands.exit = () => {\n      window.open('http://google.com', '_self')\n    }\n\n    this.commands.clear = () => {\n      this.history = []\n      // Push dummy Stdout to show Stdin\n      return createDummyStdout()\n    }\n\n    this.commands.ls = () => {\n      if (this.prompt === PROMPTDIR('/resume')) {\n        return createStdout('ls grefti')\n      } else {\n        return createDummyStdout()\n      }\n    }\n\n    this.commands.cd = ({ _ }) => {\n      const DirMaker = (_, Dir) => {\n        if (\n          (_[1] === `${Dir}` || _[1] === `${Dir}/`) &&\n          this.prompt === PROMPT\n        ) {\n          this.prompt = PROMPTDIR(`/${Dir}`)\n\n          return createDummyStdout()\n        }\n\n        // Navigate from home to root\n        if (\n          (_[1] === '../' || _[1] === '..' || typeof _[1] === 'undefined') &&\n          this.prompt === PROMPTDIR(`/${Dir}`)\n        ) {\n          this.prompt = PROMPT\n\n          return createDummyStdout()\n        }\n\n        // Navigate to self\n        if (_[1] === '.' || _[1] === './') {\n          return createDummyStdout()\n        }\n        return createStderr(`cd: ${_[1]}: No such file or directory`)\n      }\n\n      DirMaker(_, 'home')\n    }\n\n    this.commands.pwd = () => {\n      // Take current prompt into account\n      if (this.prompt === 'sjd@quantum:~') {\n        return createStdout('/')\n      } else {\n        return createStdout('/home')\n      }\n    }\n\n    this.builtIn = (stdin, terminal) => {\n      // Check for application\n      if (stdin.trim().split(' ')[0] !== 'reverse') {\n        terminal.commandNotFound(stdin)\n\n        return\n      }\n\n      stdin = stdin.trim()\n      // Get second argument\n      const argument = stdin.split(' ').slice(1).join(' ').replace(/\"/g, '')\n\n      // Do nothing if no argument given\n      if (!argument) {\n        return\n      }\n\n      // Reverse argument\n      this.stdin = argument.split('').reverse().join('')\n    }\n\n    this.autocompletionResolver = () => {\n      // Preserve cursor position\n      const cursor = this.cursor\n\n      // Reverse concatenate autocompletable according to cursor\n      let pointer = this.cursor\n      let autocompleteableStdin = ''\n      while (this.stdin[pointer - 1] !== ' ' && pointer - 1 > 0) {\n        pointer--\n        autocompleteableStdin = `${this.stdin[pointer]}${autocompleteableStdin}`\n      }\n\n      // Divide by arguments\n      const command = this.stdin.split(' ')\n\n      // Autocompleteable is program\n      if (command.length === 1) {\n        const autocompleteableProgram = command[0]\n        // Collect all autocompletion candidates\n        const candidates = []\n        const programs = [...Object.keys(this.commands), 'reverse'].sort()\n        programs.forEach((program) => {\n          if (program.startsWith(autocompleteableProgram)) {\n            candidates.push(program)\n          }\n        })\n\n        // Autocompletion resolved into multiple results\n        if (this.stdin !== '' && candidates.length > 1) {\n          this.history.push({\n            // Build table programmatically\n            render: (createElement) => {\n              const columns = candidates.length < 5 ? candidates.length : 4\n              const rows =\n                candidates.length < 5\n                  ? 1\n                  : Math.ceil(candidates.length / columns)\n\n              let index = 0\n              const table = []\n              for (let i = 0; i < rows; i++) {\n                const row = []\n                for (let j = 0; j < columns; j++) {\n                  row.push(createElement('td', candidates[index]))\n                  index++\n                }\n\n                table.push(createElement('tr', [row]))\n              }\n\n              return createElement('table', { style: { width: '100%' } }, [\n                table\n              ])\n            }\n          })\n        }\n\n        // Autocompletion resolved into one result\n        if (candidates.length === 1) {\n          // Mutating Stdin mutates the cursor, so we've to wait to push it to the end\n          const unwatch = this.$watch(\n            () => this.cursor,\n            () => {\n              this.cursor =\n                cursor +\n                (candidates[0].length - autocompleteableStdin.length + 0)\n\n              unwatch()\n            }\n          )\n\n          this.stdin = candidates[0]\n        }\n\n        return\n      }\n\n      // Check if option might be completed already or option is last tokens\n      if (\n        this.stdin[cursor] !== '' &&\n        this.stdin[cursor] !== ' ' &&\n        typeof this.stdin[cursor] !== 'undefined'\n      ) {\n        return\n      }\n\n      // Get the executable\n      const program = command[0]\n\n      // Check if any autocompleteable exists\n      if (\n        typeof this.options.long[program] === 'undefined' &&\n        typeof this.options.short[program] === 'undefined'\n      ) {\n        return\n      }\n\n      // Autocompleteable is long option\n      if (autocompleteableStdin.substring(0, 2) === '--') {\n        const candidates = []\n        this.options.long[program].forEach((option) => {\n          // If only dashes are presents, user requests all options\n          if (\n            `--${option}`.startsWith(autocompleteableStdin) ||\n            autocompleteableStdin === '--'\n          ) {\n            candidates.push(option)\n          }\n        })\n\n        // Autocompletion resolved into one result\n        if (candidates.length === 1) {\n          const autocompleted = `${this.stdin.substring(0, pointer - 1)} --${\n            candidates[0]\n          }`\n          const rest = `${this.stdin.substring(this.cursor)}`\n\n          // Mutating Stdin mutates the cursor, so we've to wait to push it to the end\n          const unwatch = this.$watch(\n            () => this.cursor,\n            () => {\n              this.cursor =\n                cursor +\n                (candidates[0].length - autocompleteableStdin.length + 2)\n\n              unwatch()\n            }\n          )\n\n          this.stdin = `${autocompleted}${rest}`\n\n          return\n        }\n\n        // Autocompletion resolved into multiple result\n        if (autocompleteableStdin === '--' || candidates.length > 1) {\n          this.history.push({\n            // Build table programmatically\n            render: (createElement) => {\n              const columns = candidates.length < 5 ? candidates.length : 4\n              const rows =\n                candidates.length < 5\n                  ? 1\n                  : Math.ceil(candidates.length / columns)\n\n              let index = 0\n              const table = []\n              for (let i = 0; i < rows; i++) {\n                const row = []\n                for (let j = 0; j < columns; j++) {\n                  row.push(createElement('td', `--${candidates[index]}`))\n                  index++\n                }\n\n                table.push(createElement('tr', [row]))\n              }\n\n              return createElement('table', { style: { width: '100%' } }, [\n                table\n              ])\n            }\n          })\n        }\n\n        return\n      }\n\n      // Autocompleteable is option\n      if (autocompleteableStdin.substring(0, 1) === '-') {\n        const candidates = []\n        this.options.short[program].forEach((option) => {\n          // If only one dash is present, user requests all options\n          if (\n            `-${option}`.startsWith(autocompleteableStdin) ||\n            autocompleteableStdin === '-'\n          ) {\n            candidates.push(option)\n          }\n        })\n\n        // Autocompletion resolved into one result\n        if (candidates.length === 1) {\n          const autocompleted = `${this.stdin.substring(0, pointer - 1)} -${\n            candidates[0]\n          }`\n          const rest = `${this.stdin.substring(this.cursor)}`\n\n          // Mutating Stdin mutates the cursor, so we've to wait to push it to the end\n          const unwatch = this.$watch(\n            () => this.cursor,\n            () => {\n              this.cursor =\n                cursor +\n                (candidates[0].length - autocompleteableStdin.length + 1)\n\n              unwatch()\n            }\n          )\n\n          this.stdin = `${autocompleted}${rest}`\n\n          return\n        }\n\n        // Autocompletion resolved into multiple result\n        if (autocompleteableStdin === '-' || candidates.length > 1) {\n          this.history.push({\n            // Build table programmatically\n            render: (createElement) => {\n              const columns = candidates.length < 5 ? candidates.length : 4\n              const rows =\n                candidates.length < 5\n                  ? 1\n                  : Math.ceil(candidates.length / columns)\n\n              let index = 0\n              const table = []\n              for (let i = 0; i < rows; i++) {\n                const row = []\n                for (let j = 0; j < columns; j++) {\n                  row.push(createElement('td', `-${candidates[index]}`))\n                  index++\n                }\n\n                table.push(createElement('tr', [row]))\n              }\n\n              return createElement('table', { style: { width: '100%' } }, [\n                table\n              ])\n            }\n          })\n        }\n      }\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\">\n* {\n  margin: 0;\n  padding: 0;\n}\nbody {\n  background: #002b36;\n\n  h1,\n  h2,\n  h3 {\n    font-family: \"Inconsolata\", monospace;\n  }\n\n  p {\n    color: #65888c;\n    font-size: 20px;\n    font-family: \"Montserrat\", sans-serif;\n  }\n\n  pre {\n    width: 100%;\n    padding: 0;\n    margin-top: 1em;\n    overflow: auto;\n    overflow-y: hidden;\n\n    code {\n      padding: 10px;\n      color: #333;\n      margin: 5px;\n    }\n  }\n\n  .vue-command {\n    .term-bar {\n      position: fixed;\n      -webkit-touch-callout: none;\n      -webkit-user-select: none;\n      -khtml-user-select: none;\n      -moz-user-select: none;\n      -ms-user-select: none;\n      user-select: none;\n    }\n\n    .term-std {\n      margin-top: 52px;\n      height: 100%;\n    }\n  }\n}\n::-webkit-scrollbar {\n  width: 8px;\n}\n\n::-webkit-scrollbar-track {\n  background: #252525;\n}\n\n::-webkit-scrollbar-thumb {\n  background: #f1f1f1;\n}\n\n::-webkit-scrollbar-thumb:hover {\n  background: #333;\n}\n</style>\n"],"sourceRoot":"src/hosted"}]}