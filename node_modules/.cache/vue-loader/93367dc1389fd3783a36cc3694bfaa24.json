{"remainingRequest":"/home/sjd/Desktop/vue-command/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/sjd/Desktop/vue-command/src/components/VueCommand.vue?vue&type=style&index=0&lang=scss&","dependencies":[{"path":"/home/sjd/Desktop/vue-command/src/components/VueCommand.vue","mtime":1599004144267},{"path":"/home/sjd/Desktop/vue-command/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/sjd/Desktop/vue-command/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/sjd/Desktop/vue-command/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/sjd/Desktop/vue-command/node_modules/sass-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/sjd/Desktop/vue-command/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/sjd/Desktop/vue-command/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgpAaW1wb3J0ICIuLi9zY3NzL21peGlucyI7CgoudnVlLWNvbW1hbmQgewogIG92ZXJmbG93LXk6IGF1dG87CiAgb3ZlcmZsb3cteDogaGlkZGVuOwoKICAudGVybS1iYXIgewogICAgYmFja2dyb3VuZDogIzIzMjYyYzsKICAgIGJvcmRlcjogMXB4IHNvbGlkICMxOTFhMWI7CiAgICBkaXNwbGF5OiBibG9jazsKICAgIGp1c3RpZnktY29udGVudDogY2VudGVyOwogICAgdG9wOiAwOwogICAgd2lkdGg6IDEwMCU7CiAgICBkaXNwbGF5OiBmbGV4OwogIH0KCiAgLnRlcm0tdGl0bGUgewogICAgZm9udC1mYW1pbHk6ICJNb250c2VycmF0Iiwgc2Fucy1zZXJpZjsKICAgIGZvbnQtc2l6ZTogMThweDsKICAgIG1hcmdpbjogMTJweDsKICAgIGJhY2tncm91bmQ6ICMyMzI2MmM7CiAgICBjb2xvcjogd2hpdGU7CiAgfQoKICAudGVybS1zdGQgewogICAgYmFja2dyb3VuZDogIzAwMmIzNjsKICAgIGRpc3BsYXk6IGJsb2NrOwogICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjsKICAgIHdpZHRoOiAxMDAlOwoKICAgIEBleHRlbmQgLnRlcm0taGlzdC1jb250YWluZXItZnVsbHNjcmVlbjsKICB9CgogIC50ZXJtLWNvbnQgewogICAgZm9udC1mYW1pbHk6ICJJbmNvbnNvbGF0YSIsIG1vbm9zcGFjZTsKICAgIHBhZGRpbmctcmlnaHQ6IDAuNXJlbTsKICAgIHBhZGRpbmctYm90dG9tOiAwLjVyZW07CiAgICBmbGV4OiAxOwogIH0KCiAgLnRlcm0taGlzdC1jb250YWluZXItZnVsbHNjcmVlbiB7CiAgICBkaXNwbGF5OiBmbGV4OwogICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjsKICAgIGZsZXg6IDE7CiAgICBoZWlnaHQ6IDEwMCU7CiAgfQoKICAudGVybS1zdGRvdXQgewogICAgd29yZC1icmVhazogYnJlYWstYWxsOwogIH0KfQo="},{"version":3,"sources":["VueCommand.vue"],"names":[],"mappingsfile":"VueCommand.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div\n    ref=\"vue-command\"\n    class=\"vue-command\">\n    <slot name=\"bar\">\n      <div\n        v-if=\"!hideBar\"\n        class=\"term-bar\">\n        <span\n          v-if=\"!hideTitle\"\n          class=\"term-title\">{{ title }}</span>\n      </div>\n    </slot>\n\n    <div\n      ref=\"term-std\"\n      class=\"term-std\">\n      <search\n        v-if=\"isSearch\"\n        ref=\"search\"\n        :executed=\"local.executed\"\n        :is-search.sync=\"isSearch\"\n        :stdin=\"stdin\"\n        @click=\"focus\"\n        @handle=\"handle\"/>\n\n      <div\n        v-show=\"!isSearch\"\n        ref=\"term-cont\"\n        :class=\"{ 'term-cont-fullscreen': local.isFullscreen }\"\n        class=\"term-cont\"\n        @click=\"focus\">\n        <div v-if=\"showIntro\">{{ intro }}</div>\n\n        <div\n          v-for=\"(stdout, index) in local.history\"\n          :key=\"index\"\n          class=\"term-hist\"\n          :class=\"{\n            'term-hist-fullscreen':\n              local.isFullscreen && index === local.history.length - 1\n          }\">\n          <stdout\n            v-show=\"!local.isFullscreen || index === local.history.length - 1\"\n            :component=\"stdout\"\n            class=\"term-stdout\"/>\n\n          <stdin\n            v-show=\"\n              (index === 0 && !local.isFullscreen) ||\n                (!(index === local.history.length - 1 && local.isInProgress) &&\n                  !local.isFullscreen)\n            \"\n            ref=\"stdin\"\n            :bus=\"bus\"\n            :cursor=\"local.cursor\"\n            :hide-prompt=\"hidePrompt\"\n            :is-fullscreen=\"local.isFullscreen\"\n            :is-in-progress=\"local.isInProgress\"\n            :is-last=\"index === local.history.length - 1\"\n            :prompt=\"prompt\"\n            :help-text=\"helpText\"\n            :help-timeout=\"helpTimeout\"\n            :show-help=\"showHelp\"\n            :stdin.sync=\"local.stdin\"\n            :uid=\"_uid\"\n            @handle=\"handle\">\n            <template #prompt>\n              <slot name=\"prompt\" />\n            </template>\n          </stdin>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport Vue from 'vue'\n\nimport Search from './Search'\nimport Stdin from './Stdin'\nimport Stdout from './Stdout'\nimport AutocompleteMixin from '../mixins/autocomplete'\nimport HandleMixin from '../mixins/handle'\nimport HistoryMixin from '../mixins/history'\nimport SearchMixin from '../mixins/search'\nimport UIMixin from '../mixins/ui'\nimport { EVENT_LISTENERS } from './../library'\n\n// Event bus for communication\nconst EventBus = new Vue()\n\nexport default {\n  components: { Search, Stdin, Stdout },\n\n  mixins: [AutocompleteMixin, HandleMixin, HistoryMixin, SearchMixin, UIMixin],\n\n  provide () {\n    return {\n      emitExecute: this.emitExecute,\n      emitExecuted: this.emitExecuted,\n      emitInput: this.emitInput,\n      setStdin: this.setStdin\n    }\n  },\n\n  props: {\n    autocompletionResolver: {\n      default: undefined,\n      type: Function\n    },\n\n    builtIn: {\n      default: undefined,\n      type: Function\n    },\n\n    commands: {\n      default: () => ({}),\n      type: Object\n    },\n\n    cursor: {\n      default: 0,\n      type: Number\n    },\n\n    // Default event listeners\n    eventListeners: {\n      default: () => [\n        EVENT_LISTENERS.autocomplete,\n        EVENT_LISTENERS.history,\n        EVENT_LISTENERS.search\n      ],\n\n      type: Array\n    },\n\n    // Non-empty executed commands\n    executed: {\n      default: () => new Set(),\n      type: Set\n    },\n\n    helpTimeout: {\n      default: 4000,\n      type: Number\n    },\n\n    hideBar: {\n      default: false,\n      type: Boolean\n    },\n\n    hidePrompt: {\n      default: false,\n      type: Boolean\n    },\n\n    hideTitle: {\n      default: false,\n      type: Boolean\n    },\n\n    helpText: {\n      default: 'Type help',\n      type: String\n    },\n\n    // All executed commands\n    history: {\n      default: () => [],\n      type: Array\n    },\n\n    intro: {\n      default: 'Fasten your seatbelts!',\n      type: String\n    },\n\n    isFullscreen: {\n      default: false,\n      type: Boolean\n    },\n\n    isInProgress: {\n      default: false,\n      type: Boolean\n    },\n\n    notFound: {\n      default: 'command not found',\n      type: String\n    },\n\n    // Options when parsing Stdin\n    parserOptions: {\n      default: () => ({}),\n      type: Object\n    },\n\n    // History command pointer\n    pointer: {\n      default: 0,\n      type: Number\n    },\n\n    prompt: {\n      default: 'sjd@quantum:~',\n      type: String\n    },\n\n    showHelp: {\n      default: false,\n      type: Boolean\n    },\n\n    showIntro: {\n      default: false,\n      type: Boolean\n    },\n\n    // Current Stdin\n    stdin: {\n      default: '',\n      type: String\n    },\n\n    title: {\n      default: 'sjd@quantum:~',\n      type: String\n    }\n  },\n\n  data: () => ({\n    // Bus for communication\n    bus: EventBus,\n\n    // A local copy to allow the absence of properties\n    local: {\n      // Current Stdin\n      stdin: ''\n    },\n\n    // Detect scroll and resize events\n    scroll: {\n      eventListener: undefined,\n      // Determinates if scolled to bottom\n      isBottom: true,\n      resizeObserver: undefined\n    }\n  }),\n\n  watch: {\n    stdin () {\n      this.setStdin(this.stdin)\n    },\n\n    'local.stdin' () {\n      // Emit the current Stdin as an event\n      this.$emit('input', this.local.stdin)\n\n      // Update given property\n      this.$emit('update:stdin', this.local.stdin)\n\n      // Make searching history work again\n      if (this.local.stdin === '') {\n        this.setPointer(this.local.executed.size)\n      }\n    }\n  },\n\n  mounted () {\n    // Scroll to bottom if Stdout mutates terminal height\n    this.scroll.resizeObserver = new ResizeObserver(async event => {\n      await this.$nextTick()\n\n      // Only scroll to bottom if it was scrolled to bottom before\n      if (this.scroll.isBottom) {\n        this.$refs['term-std'].scrollTop = this.$refs['term-std'].scrollHeight\n      }\n    })\n\n    this.scroll.resizeObserver.observe(this.$refs['term-cont'])\n\n    // Check if scrolled to bottom\n    this.scroll.eventListener = () => {\n      const terminal = this.$refs['term-std']\n      this.scroll.isBottom =\n        terminal.scrollHeight - terminal.scrollTop - terminal.clientHeight ===\n        0\n    }\n\n    this.$refs['term-std'].addEventListener(\n      'scroll',\n      this.scroll.eventListener\n    )\n\n    // Bind given event listeners\n    this.eventListeners.forEach(eventListener => eventListener(this))\n  },\n\n  created () {\n    // Observe \"executed\" changes since Vue.js can't watch a \"Set\". See: https://github.com/ndabAP/vue-command/issues/151\n    this.executed.add = function (...x) {\n      this.local.executed.add(...x)\n\n      Object.getPrototypeOf(this).add.call(this, ...x)\n    }\n    this.executed.clear = function () {\n      this.local.executed.clear()\n\n      Object.getPrototypeOf(this).add.call(this)\n    }\n    this.executed.delete = function (...x) {\n      this.local.executed.delete(...x)\n\n      Object.getPrototypeOf(this).delete.call(this, ...x)\n    }\n\n    // Apply user given properties\n    this.setCursor(this.cursor)\n    this.setPointer(this.pointer)\n    this.setStdin(this.stdin)\n    this.setIsInProgress(this.isInProgress)\n    this.setIsFullscreen(this.isFullscreen)\n\n    const history = [...this.history]\n    // If there is no entry push dummy Stdout to show Stdin\n    if (history.length === 0) {\n      // Push dummy Stdout without termination\n      history.push({\n        name: 'VueCommandDummyStdout',\n        render: createElement => createElement('span', {}, '')\n      })\n\n      // Update the history property\n      this.$emit('update:history', [...history])\n    }\n\n    this.setHistory([...history])\n  },\n\n  methods: {\n    emitInput (input) {\n      this.$emit('input', input)\n    },\n\n    emitExecute () {\n      this.$emit('execute')\n    },\n\n    emitExecuted () {\n      this.$emit('executed')\n    },\n\n    // Focus on last Stdin or search\n    focus () {\n      // Check if search mode\n      if (this.isSearch) {\n        this.$refs.search.focus()\n\n        return\n      }\n\n      // Latest Stdin is latest history entry\n      const stdin = this.$refs.stdin[this.local.history.length - 1]\n      // Call component method\n      stdin.focus()\n    },\n\n    setStdin (stdin) {\n      this.local.stdin = stdin\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\">\n@import \"../scss/mixins\";\n\n.vue-command {\n  overflow-y: auto;\n  overflow-x: hidden;\n\n  .term-bar {\n    background: #23262c;\n    border: 1px solid #191a1b;\n    display: block;\n    justify-content: center;\n    top: 0;\n    width: 100%;\n    display: flex;\n  }\n\n  .term-title {\n    font-family: \"Montserrat\", sans-serif;\n    font-size: 18px;\n    margin: 12px;\n    background: #23262c;\n    color: white;\n  }\n\n  .term-std {\n    background: #002b36;\n    display: block;\n    flex-direction: column;\n    width: 100%;\n\n    @extend .term-hist-container-fullscreen;\n  }\n\n  .term-cont {\n    font-family: \"Inconsolata\", monospace;\n    padding-right: 0.5rem;\n    padding-bottom: 0.5rem;\n    flex: 1;\n  }\n\n  .term-hist-container-fullscreen {\n    display: flex;\n    flex-direction: column;\n    flex: 1;\n    height: 100%;\n  }\n\n  .term-stdout {\n    word-break: break-all;\n  }\n}\n</style>\n"]}]}