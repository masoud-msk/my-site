{"remainingRequest":"/home/sjd/Desktop/my-site/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/sjd/Desktop/my-site/src/hosted/App.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/sjd/Desktop/my-site/src/hosted/App.vue","mtime":1599173601484},{"path":"/home/sjd/Desktop/my-site/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/sjd/Desktop/my-site/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/sjd/Desktop/my-site/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/sjd/Desktop/my-site/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/sjd/Desktop/my-site/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["App.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAgfile":"App.vue","sourceRoot":"src/hosted","sourcesContent":["<template>\n  <main>\n    <vue-command\n      :autocompletion-resolver=\"autocompletionResolver\"\n      :built-in=\"builtIn\"\n      :commands=\"commands\"\n      :cursor.sync=\"cursor\"\n      :history.sync=\"history\"\n      :help-timeout=\"1250\"\n      :prompt=\"prompt\"\n      :stdin.sync=\"stdin\"\n      show-help></vue-command>\n  </main>\n</template>\n\n<script>\nimport ChuckNorris from './ChuckNorris'\nimport Party from './Party'\nimport NanoEditor from './NanoEditor'\nimport VueCommand from '../components/VueCommand'\nimport { createStdout, createStderr, createDummyStdout } from '../library'\n\nconst PROMPT = 'sjd@quantum:~$'\nconst PROMPTDIR = (DIR) => {\n  return `sjd@quantum:~${DIR}$`\n}\nconst DIR = [\n  {\n    Dir: 'resume',\n    ls: `\n          <table class=\"ls txt\">\n            <tr>\n              <td>android.txt</td>\n              <td>python.txt</td>\n              <td>nodejs.txt</td>\n            </tr>\n          </table>\n  `\n  },\n  {\n    Dir: 'education',\n    ls: `\n          <table class=\"ls txt\">\n            <tr>\n              <td>mathDiploma.txt</td>\n              <td>engineer.txt</td>\n            </tr>\n          </table>\n  `\n  },\n  {\n    Dir: 'courses',\n    ls: `\n          <table class=\"ls txt\">\n            <tr>\n              <td>android.txt</td>\n              <td>web.txt</td>\n            </tr>\n          </table>\n  `\n  },\n  {\n    Dir: 'hobbies',\n    ls: `\n          <table class=\"ls txt\">\n            <tr>\n              <td>git.txt</td>\n            </tr>\n          </table>\n  `\n  }\n]\n\nconst TXT = [\n  {\n    ntxt: 'skills.txt',\n    txt: `linux<br>web developer<br>nodejs<br>\n      javascript<br>express js<br>vue js<br>mongoDB<br>\n      android developer(java)<br>python programmer<br>\n      c++ programmer<br>ui/ux designer<br>git<br>\n      seo<br>html/css<br>teamwork`,\n    Dir: PROMPT\n  },\n  {\n    ntxt: 'contactMe.txt',\n    txt: `<strong>mail: </strong>sajadadineh@protonmail.com<br>\n          <strong>github: </strong><a href=\"https://github.com/sajadadineh\" target=\"_blank\">github.com/sajadadineh</a><br>\n          <strong>github: </strong><a href=\"https://www.linkedin.com/in/sajad-adineh-2b0153188/\" target=\"_blank\">linkedin.com/sajadadineh</a><br>\n    `,\n    Dir: PROMPT\n  },\n  {\n    ntxt: 'android.txt',\n    txt: `<h2>Android developer , university tehran</h2>\n      <h5>2017-2018</h5>\n      <h3><a href=\"https://maktabkhooneh.org/course/%D8%A2%D9%85%D9%88%D8%B2%D8%B4-%D8%A7%D9%86%D8%AF%D8%B1%D9%88%DB%8C%D8%AF-mk337/ target=\"_blank\">link</a></h3>\n\n  `,\n    Dir: PROMPTDIR('/courses')\n  },\n  {\n    ntxt: 'web.txt',\n    txt: `<h2>Web developer, weblite school</h2>\n      <h5>Apr 2020-Jul 2020</h5>\n      <h3><a href=\"https://www.aparat.com/v/pESVC\" target=\"_blank\">link</a></h3>\n\n  `,\n    Dir: PROMPTDIR('/courses')\n  },\n  {\n    ntxt: 'mathDiploma.txt',\n    txt: `<h2>Math diploma , Beheshti high school</h2>\n      <h5>2015-2018</h5>\n      <h3>tehran</h3>\n  `,\n    Dir: PROMPTDIR('/education')\n  },\n  {\n    ntxt: 'engineer.txt',\n    txt: `<h2>Computer software engineering , Islamic azad university</h2>\n      <h5>2019-present</h5>\n      <h3>tehran</h3>\n  `,\n    Dir: PROMPTDIR('/education')\n  },\n  {\n    ntxt: 'nodejs.txt',\n    txt: `<h2>Web developer internship at weblite</h2>\n      <h5>Apr 2020-Jul 2020</h5>\n      <h3>front and backend developer</h3>\n    <br><hr><br>\n    <h2>Nodejs developer and system architecture at tiva soft</h2>\n      <h5>Jul 2020-present</h5>\n      <h3>systerm architecture and backend developer in shahr farsh</h3>`,\n    Dir: PROMPTDIR('/resume')\n  },\n  {\n    ntxt: 'python.txt',\n    txt: `<h2>Python programmer at government organization</h2>\n      <h5>2019-2020</h5>\n      <h3>Developed a web crawler and scrapy for internet</h3>`,\n    Dir: PROMPTDIR('/resume')\n  },\n  {\n    ntxt: 'android.txt',\n    txt: `<h2>Android developer & ui / ux designer at winep</h2>\n      <h5>2017-2019</h5>\n      <h3>collaboration in the android programming team of smart home program</h3>`,\n    Dir: PROMPTDIR('/resume')\n  },\n  {\n    ntxt: 'git.txt',\n    txt: `<h3>solve programming problems and learn new technologies and solve math problems \n          in <a href=\"https://projecteuler.net/archives\" target=\"_blank\" >euler site</a>\n          and push them in github or gitlab</h3>`,\n    Dir: PROMPTDIR('/hobbies')\n  }\n]\n\nexport default {\n  components: {\n    VueCommand\n  },\n\n  data: () => ({\n    autocompletionResolver: () => undefined,\n    builtIn: undefined,\n    commands: {\n      // list Directory\n      ls: undefined,\n\n      // exit the terminal\n      exit: undefined,\n\n      // Navigate to home, self and back\n      cd: undefined,\n\n      // Clear terminals history\n      clear: undefined,\n\n      // show one text file\n      cat: undefined,\n\n      // Returns the parsed object to test parsing\n      // E. g.: echo --x=\"one two three\" --y=\"one two\" --z=\"one\" --test=\"okay\" --x1 --y2 --t=ok -dash\n      // echo: (_) => createStdout(JSON.stringify(_, null, 2)),\n\n      // Show help\n      help: () =>\n        createStdout(`\n        &nbsp;<strong>hello-world</strong> [test command]<br>\n        &nbsp;<strong>cd</strong> [change the shell working directory]<br>\n        &nbsp;<strong>cat</strong> [concatenate files and print on the standard output]<br>\n        &nbsp;<strong>clear</strong> [clear terminal]<br>\n        &nbsp;<strong>ls</strong> [list directory contents]<br>\n        &nbsp;<strong>exit</strong> [cause normal process termination]<br>\n        &nbsp;<strong>norris</strong> [tell me a joke]<br>\n        &nbsp;<strong>nano</strong> [nano's ANOther editor, inspired by Pico]<br>\n      `),\n\n      // Return simple text\n      'hello-world': () => createStdout('Hello world'),\n\n      // Show a animation\n      'sjd.js': () => Party,\n\n      // Nano editor available in many shells\n      nano: () => NanoEditor,\n\n      // Return a Chuck Norris joke\n      norris: () => ChuckNorris,\n\n      // Show current path\n      pwd: () => undefined\n    },\n\n    // Terminal cursor position\n    cursor: 0,\n    lsHistory: [],\n    history: [],\n    options: {\n      long: {\n        cd: ['test']\n      },\n\n      short: {}\n    },\n\n    prompt: PROMPT,\n    stdin: ''\n  }),\n\n  created () {\n    this.commands.exit = () => {\n      window.open('http://google.com', '_self')\n    }\n\n    this.commands.clear = () => {\n      this.history = []\n      // Push dummy Stdout to show Stdin\n      return createDummyStdout()\n    }\n\n    this.commands.ls = (_) => {\n      if (this.prompt === PROMPT) {\n        return createStdout(`\n          <table class=\"ls dir\">\n            <tr>\n              <td>${DIR[0].Dir}</td>\n              <td>${DIR[1].Dir}</td>\n              <td>${DIR[2].Dir}</td>            \n            </tr>\n            <tr>\n              <td>${DIR[3].Dir}</td>\n              <td class=\"txt\">${TXT[0].ntxt}</td>\n              <td class=\"txt\">${TXT[1].ntxt}</td>\n              <td class=\"program\">sjd.js</td>\n            </tr>\n          </table>\n  `)\n      }\n\n      for (let i = 0; DIR.length > i; i++) {\n        if (this.prompt === PROMPTDIR(`/${DIR[i].Dir}`)) {\n          return createStdout(`${DIR[i].ls}`)\n        }\n      }\n      return createDummyStdout()\n    }\n\n    this.commands.cat = ({ _ }) => {\n      for (let i = 0; TXT.length > i; i++) {\n        if (_[1] === TXT[i].ntxt && this.prompt === TXT[i].Dir) {\n          return createStdout(`${TXT[i].txt}`)\n        }\n      }\n      return createStderr(`cat: ${_[1]}.txt: Is a directory`)\n    }\n\n    this.commands.cd = ({ _ }) => {\n      for (let i = 0; DIR.length > i; i++) {\n        if (\n          (_[1] === DIR[i].Dir || _[1] === `${DIR[i].Dir}/`) &&\n          this.prompt === PROMPT\n        ) {\n          this.prompt = PROMPTDIR(`/${DIR[i].Dir}`)\n\n          return createDummyStdout()\n        }\n\n        if (\n          (_[1] === '../' || _[1] === '..' || typeof _[1] === 'undefined') &&\n          this.prompt === PROMPTDIR(`/${DIR[i].Dir}`)\n        ) {\n          this.prompt = PROMPT\n\n          return createDummyStdout()\n        }\n\n        if (_[1] === '.' || _[1] === './') {\n          return createDummyStdout()\n        }\n      }\n      return createStderr(`cd: ${_[1]}: No such file or directory`)\n    }\n\n    this.commands.pwd = () => {\n      // Take current prompt into account\n      if (this.prompt === 'sjd@quantum:~') {\n        return createStdout('/')\n      } else {\n        return createStdout('/home')\n      }\n    }\n\n    this.builtIn = (stdin, terminal) => {\n      // Check for application\n      if (stdin.trim().split(' ')[0] !== 'reverse') {\n        terminal.commandNotFound(stdin)\n\n        return\n      }\n\n      stdin = stdin.trim()\n      // Get second argument\n      const argument = stdin.split(' ').slice(1).join(' ').replace(/\"/g, '')\n\n      // Do nothing if no argument given\n      if (!argument) {\n        return\n      }\n\n      // Reverse argument\n      this.stdin = argument.split('').reverse().join('')\n    }\n\n    this.autocompletionResolver = () => {\n      // Preserve cursor position\n      // **\n      const cursor = this.cursor\n\n      // Reverse concatenate autocompletable according to cursor\n      let pointer = this.cursor\n      let autocompleteableStdin = ''\n      while (this.stdin[pointer - 1] !== ' ' && pointer - 1 > 0) {\n        pointer--\n        autocompleteableStdin = `${this.stdin[pointer]}${autocompleteableStdin}`\n      }\n\n      // Divide by arguments\n      const command = this.stdin.split(' ')\n\n      // Autocompleteable is program\n      if (command.length === 1) {\n        const autocompleteableProgram = command[0]\n        // Collect all autocompletion candidates\n        const candidates = []\n        const programs = [...Object.keys(this.commands), 'reverse'].sort()\n        programs.forEach((program) => {\n          if (program.startsWith(autocompleteableProgram)) {\n            candidates.push(program)\n          }\n        })\n\n        // Autocompletion resolved into multiple results\n        if (this.stdin !== '' && candidates.length > 1) {\n          this.history.push({\n            // Build table programmatically\n            render: (createElement) => {\n              const columns = candidates.length < 5 ? candidates.length : 4\n              const rows =\n                candidates.length < 5\n                  ? 1\n                  : Math.ceil(candidates.length / columns)\n\n              let index = 0\n              const table = []\n              for (let i = 0; i < rows; i++) {\n                const row = []\n                for (let j = 0; j < columns; j++) {\n                  row.push(createElement('td', candidates[index]))\n                  index++\n                }\n\n                table.push(createElement('tr', [row]))\n              }\n\n              return createElement('table', { style: { width: '30%' } }, [\n                table\n              ])\n            }\n          })\n        }\n\n        // Autocompletion resolved into one result\n        if (candidates.length === 1) {\n          // Mutating Stdin mutates the cursor, so we've to wait to push it to the end\n          const unwatch = this.$watch(\n            () => this.cursor,\n            () => {\n              this.cursor =\n                cursor +\n                (candidates[0].length - autocompleteableStdin.length + 0)\n\n              unwatch()\n            }\n          )\n\n          this.stdin = candidates[0]\n        }\n\n        return\n      }\n\n      // Check if option might be completed already or option is last tokens\n      if (\n        this.stdin[cursor] !== '' &&\n        this.stdin[cursor] !== ' ' &&\n        typeof this.stdin[cursor] !== 'undefined'\n      ) {\n        return\n      }\n\n      // Get the executable\n\n      const program = command[0]\n\n      // Check if any autocompleteable exists\n      if (\n        typeof this.options.long[program] === 'undefined' &&\n        typeof this.options.short[program] === 'undefined'\n      ) {\n        return\n      }\n\n      // Autocompleteable is long option\n      if (autocompleteableStdin.substring(0, 2) === '--') {\n        const candidates = []\n        this.options.long[program].forEach((option) => {\n          // If only dashes are presents, user requests all options\n          if (\n            `--${option}`.startsWith(autocompleteableStdin) ||\n            autocompleteableStdin === '--'\n          ) {\n            candidates.push(option)\n          }\n        })\n\n        // Autocompletion resolved into one result\n        if (candidates.length === 1) {\n          const autocompleted = `${this.stdin.substring(0, pointer - 1)} --${\n            candidates[0]\n          }`\n          const rest = `${this.stdin.substring(this.cursor)}`\n\n          // Mutating Stdin mutates the cursor, so we've to wait to push it to the end\n          const unwatch = this.$watch(\n            () => this.cursor,\n            () => {\n              this.cursor =\n                cursor +\n                (candidates[0].length - autocompleteableStdin.length + 2)\n\n              unwatch()\n            }\n          )\n\n          this.stdin = `${autocompleted}${rest}`\n\n          return\n        }\n\n        // Autocompletion resolved into multiple result\n        if (autocompleteableStdin === '--' || candidates.length > 1) {\n          this.history.push({\n            // Build table programmatically\n            render: (createElement) => {\n              const columns = candidates.length < 5 ? candidates.length : 4\n              const rows =\n                candidates.length < 5\n                  ? 1\n                  : Math.ceil(candidates.length / columns)\n\n              let index = 0\n              const table = []\n              for (let i = 0; i < rows; i++) {\n                const row = []\n                for (let j = 0; j < columns; j++) {\n                  row.push(createElement('td', `--${candidates[index]}`))\n                  index++\n                }\n\n                table.push(createElement('tr', [row]))\n              }\n\n              return createElement('table', { style: { width: '100%' } }, [\n                table\n              ])\n            }\n          })\n        }\n\n        return\n      }\n\n      // Autocompleteable is option\n      if (autocompleteableStdin.substring(0, 1) === '-') {\n        const candidates = []\n        this.options.short[program].forEach((option) => {\n          // If only one dash is present, user requests all options\n          if (\n            `-${option}`.startsWith(autocompleteableStdin) ||\n            autocompleteableStdin === '-'\n          ) {\n            candidates.push(option)\n          }\n        })\n\n        // Autocompletion resolved into one result\n        if (candidates.length === 1) {\n          const autocompleted = `${this.stdin.substring(0, pointer - 1)} -${\n            candidates[0]\n          }`\n          const rest = `${this.stdin.substring(this.cursor)}`\n\n          // Mutating Stdin mutates the cursor, so we've to wait to push it to the end\n          const unwatch = this.$watch(\n            () => this.cursor,\n            () => {\n              this.cursor =\n                cursor +\n                (candidates[0].length - autocompleteableStdin.length + 1)\n\n              unwatch()\n            }\n          )\n\n          this.stdin = `${autocompleted}${rest}`\n\n          return\n        }\n\n        // Autocompletion resolved into multiple result\n        if (autocompleteableStdin === '-' || candidates.length > 1) {\n          this.history.push({\n            // Build table programmatically\n            render: (createElement) => {\n              const columns = candidates.length < 5 ? candidates.length : 4\n              const rows =\n                candidates.length < 5\n                  ? 1\n                  : Math.ceil(candidates.length / columns)\n\n              let index = 0\n              const table = []\n              for (let i = 0; i < rows; i++) {\n                const row = []\n                for (let j = 0; j < columns; j++) {\n                  row.push(createElement('td', `-${candidates[index]}`))\n                  index++\n                }\n\n                table.push(createElement('tr', [row]))\n              }\n\n              return createElement('table', { style: { width: '100%' } }, [\n                table\n              ])\n            }\n          })\n        }\n      }\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\">\n.ls {\n  width: 40%;\n}\n.txt {\n  color: #65888c;\n}\n.program {\n  color: #4e9a06;\n}\n.dir {\n  color: #3465a4;\n}\n* {\n  margin: 0;\n  padding: 0;\n}\nbody {\n  background: #002b36;\n\n  h1,\n  h2,\n  h3 {\n    font-family: \"Inconsolata\", monospace;\n  }\n\n  p {\n    color: #65888c;\n    font-size: 20px;\n    font-family: \"Montserrat\", sans-serif;\n  }\n\n  pre {\n    width: 100%;\n    padding: 0;\n    margin-top: 1em;\n    overflow: auto;\n    overflow-y: hidden;\n\n    code {\n      padding: 10px;\n      color: #333;\n      margin: 5px;\n    }\n  }\n\n  .vue-command {\n    .term-bar {\n      position: fixed;\n      -webkit-touch-callout: none;\n      -webkit-user-select: none;\n      -khtml-user-select: none;\n      -moz-user-select: none;\n      -ms-user-select: none;\n      user-select: none;\n    }\n\n    .term-std {\n      margin-top: 52px;\n      height: 100%;\n    }\n  }\n}\n::-webkit-scrollbar {\n  width: 8px;\n}\n\n::-webkit-scrollbar-track {\n  background: #252525;\n}\n\n::-webkit-scrollbar-thumb {\n  background: #f1f1f1;\n}\n\n::-webkit-scrollbar-thumb:hover {\n  background: #333;\n}\n</style>\n"]}]}