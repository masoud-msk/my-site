{"remainingRequest":"/home/sjd/Desktop/my-site/vue-site/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/sjd/Desktop/my-site/vue-site/src/hosted/App.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/sjd/Desktop/my-site/vue-site/src/hosted/App.vue","mtime":1599147995379},{"path":"/home/sjd/Desktop/my-site/vue-site/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/sjd/Desktop/my-site/vue-site/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/sjd/Desktop/my-site/vue-site/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/sjd/Desktop/my-site/vue-site/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["App.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAgfile":"App.vue","sourceRoot":"src/hosted","sourcesContent":["<template>\n  <main>\n    <vue-command\n      :autocompletion-resolver=\"autocompletionResolver\"\n      :built-in=\"builtIn\"\n      :commands=\"commands\"\n      :cursor.sync=\"cursor\"\n      :history.sync=\"history\"\n      :help-timeout=\"1250\"\n      :prompt=\"prompt\"\n      :stdin.sync=\"stdin\"\n      show-help></vue-command>\n  </main>\n</template>\n\n<script>\nimport ChuckNorris from './ChuckNorris'\nimport Party from './Party'\nimport NanoEditor from './NanoEditor'\nimport VueCommand from '../components/VueCommand'\nimport { createStdout, createStderr, createDummyStdout } from '../library'\n\nconst PROMPT = 'sjd@quantum:~$'\nconst PROMPTDIR = (DIR) => {\n  return `sjd@quantum:~${DIR}$`\n}\n\nexport default {\n  components: {\n    VueCommand\n  },\n\n  data: () => ({\n    autocompletionResolver: () => undefined,\n    builtIn: undefined,\n    commands: {\n      // list Directory\n      ls: undefined,\n\n      // exit the terminal\n      exit: undefined,\n\n      // Navigate to home, self and back\n      cd: undefined,\n\n      // Clear terminals history\n      clear: undefined,\n\n      // Returns the parsed object to test parsing\n      // E. g.: echo --x=\"one two three\" --y=\"one two\" --z=\"one\" --test=\"okay\" --x1 --y2 --t=ok -dash\n      // echo: (_) => createStdout(JSON.stringify(_, null, 2)),\n\n      // Show help\n      help: () =>\n        createStdout(`\n        &nbsp;cd [dir]<br>\n        &nbsp;clear<br>\n        &nbsp;exit<br>\n        &nbsp;echo<br>\n        &nbsp;sjd<br>\n        &nbsp;hello-world<br>\n        &nbsp;norris<br>\n        &nbsp;nano<br>\n      `),\n\n      // Return simple text\n      'hello-world': () => createStdout('Hello world'),\n\n      // Show a animation\n      sjd: () => Party,\n\n      // Nano editor available in many shells\n      nano: () => NanoEditor,\n\n      // Return a Chuck Norris joke\n      norris: () => ChuckNorris,\n\n      // Show current path\n      pwd: () => undefined\n    },\n\n    // Terminal cursor position\n    cursor: 0,\n    history: [],\n    options: {\n      long: {\n        pokedex: ['color'],\n        loading: ['amount', 'timeout']\n      },\n\n      short: {\n        pokedex: ['h']\n      }\n    },\n\n    prompt: PROMPT,\n    stdin: ''\n  }),\n\n  created () {\n    this.commands.exit = () => {\n      window.open('http://google.com', '_self')\n    }\n\n    this.commands.clear = () => {\n      this.history = []\n      // Push dummy Stdout to show Stdin\n      return createDummyStdout()\n    }\n\n    this.commands.ls = () => {\n      if (this.prompt === PROMPTDIR('/resume')) {\n        return createStdout('ls grefti')\n      } else {\n        return createDummyStdout()\n      }\n    }\n\n    this.commands.cd = ({ _ }) => {\n      const DirMaker = (_, Dir) => {\n        if (\n          (_[1] === `${Dir}` || _[1] === `${Dir}/`) &&\n          this.prompt === PROMPT\n        ) {\n          this.prompt = PROMPTDIR(`/${Dir}`)\n\n          return createDummyStdout()\n        }\n\n        // Navigate from home to root\n        if (\n          (_[1] === '../' || _[1] === '..' || typeof _[1] === 'undefined') &&\n          this.prompt === PROMPTDIR(`/${Dir}`)\n        ) {\n          this.prompt = PROMPT\n\n          return createDummyStdout()\n        }\n\n        // Navigate to self\n        if (_[1] === '.' || _[1] === './') {\n          return createDummyStdout()\n        }\n        return createStderr(`cd: ${_[1]}: No such file or directory`)\n      }\n\n      DirMaker(_, 'home')\n    }\n\n    this.commands.pwd = () => {\n      // Take current prompt into account\n      if (this.prompt === 'sjd@quantum:~') {\n        return createStdout('/')\n      } else {\n        return createStdout('/home')\n      }\n    }\n\n    this.builtIn = (stdin, terminal) => {\n      // Check for application\n      if (stdin.trim().split(' ')[0] !== 'reverse') {\n        terminal.commandNotFound(stdin)\n\n        return\n      }\n\n      stdin = stdin.trim()\n      // Get second argument\n      const argument = stdin.split(' ').slice(1).join(' ').replace(/\"/g, '')\n\n      // Do nothing if no argument given\n      if (!argument) {\n        return\n      }\n\n      // Reverse argument\n      this.stdin = argument.split('').reverse().join('')\n    }\n\n    this.autocompletionResolver = () => {\n      // Preserve cursor position\n      const cursor = this.cursor\n\n      // Reverse concatenate autocompletable according to cursor\n      let pointer = this.cursor\n      let autocompleteableStdin = ''\n      while (this.stdin[pointer - 1] !== ' ' && pointer - 1 > 0) {\n        pointer--\n        autocompleteableStdin = `${this.stdin[pointer]}${autocompleteableStdin}`\n      }\n\n      // Divide by arguments\n      const command = this.stdin.split(' ')\n\n      // Autocompleteable is program\n      if (command.length === 1) {\n        const autocompleteableProgram = command[0]\n        // Collect all autocompletion candidates\n        const candidates = []\n        const programs = [...Object.keys(this.commands), 'reverse'].sort()\n        programs.forEach((program) => {\n          if (program.startsWith(autocompleteableProgram)) {\n            candidates.push(program)\n          }\n        })\n\n        // Autocompletion resolved into multiple results\n        if (this.stdin !== '' && candidates.length > 1) {\n          this.history.push({\n            // Build table programmatically\n            render: (createElement) => {\n              const columns = candidates.length < 5 ? candidates.length : 4\n              const rows =\n                candidates.length < 5\n                  ? 1\n                  : Math.ceil(candidates.length / columns)\n\n              let index = 0\n              const table = []\n              for (let i = 0; i < rows; i++) {\n                const row = []\n                for (let j = 0; j < columns; j++) {\n                  row.push(createElement('td', candidates[index]))\n                  index++\n                }\n\n                table.push(createElement('tr', [row]))\n              }\n\n              return createElement('table', { style: { width: '100%' } }, [\n                table\n              ])\n            }\n          })\n        }\n\n        // Autocompletion resolved into one result\n        if (candidates.length === 1) {\n          // Mutating Stdin mutates the cursor, so we've to wait to push it to the end\n          const unwatch = this.$watch(\n            () => this.cursor,\n            () => {\n              this.cursor =\n                cursor +\n                (candidates[0].length - autocompleteableStdin.length + 0)\n\n              unwatch()\n            }\n          )\n\n          this.stdin = candidates[0]\n        }\n\n        return\n      }\n\n      // Check if option might be completed already or option is last tokens\n      if (\n        this.stdin[cursor] !== '' &&\n        this.stdin[cursor] !== ' ' &&\n        typeof this.stdin[cursor] !== 'undefined'\n      ) {\n        return\n      }\n\n      // Get the executable\n      const program = command[0]\n\n      // Check if any autocompleteable exists\n      if (\n        typeof this.options.long[program] === 'undefined' &&\n        typeof this.options.short[program] === 'undefined'\n      ) {\n        return\n      }\n\n      // Autocompleteable is long option\n      if (autocompleteableStdin.substring(0, 2) === '--') {\n        const candidates = []\n        this.options.long[program].forEach((option) => {\n          // If only dashes are presents, user requests all options\n          if (\n            `--${option}`.startsWith(autocompleteableStdin) ||\n            autocompleteableStdin === '--'\n          ) {\n            candidates.push(option)\n          }\n        })\n\n        // Autocompletion resolved into one result\n        if (candidates.length === 1) {\n          const autocompleted = `${this.stdin.substring(0, pointer - 1)} --${\n            candidates[0]\n          }`\n          const rest = `${this.stdin.substring(this.cursor)}`\n\n          // Mutating Stdin mutates the cursor, so we've to wait to push it to the end\n          const unwatch = this.$watch(\n            () => this.cursor,\n            () => {\n              this.cursor =\n                cursor +\n                (candidates[0].length - autocompleteableStdin.length + 2)\n\n              unwatch()\n            }\n          )\n\n          this.stdin = `${autocompleted}${rest}`\n\n          return\n        }\n\n        // Autocompletion resolved into multiple result\n        if (autocompleteableStdin === '--' || candidates.length > 1) {\n          this.history.push({\n            // Build table programmatically\n            render: (createElement) => {\n              const columns = candidates.length < 5 ? candidates.length : 4\n              const rows =\n                candidates.length < 5\n                  ? 1\n                  : Math.ceil(candidates.length / columns)\n\n              let index = 0\n              const table = []\n              for (let i = 0; i < rows; i++) {\n                const row = []\n                for (let j = 0; j < columns; j++) {\n                  row.push(createElement('td', `--${candidates[index]}`))\n                  index++\n                }\n\n                table.push(createElement('tr', [row]))\n              }\n\n              return createElement('table', { style: { width: '100%' } }, [\n                table\n              ])\n            }\n          })\n        }\n\n        return\n      }\n\n      // Autocompleteable is option\n      if (autocompleteableStdin.substring(0, 1) === '-') {\n        const candidates = []\n        this.options.short[program].forEach((option) => {\n          // If only one dash is present, user requests all options\n          if (\n            `-${option}`.startsWith(autocompleteableStdin) ||\n            autocompleteableStdin === '-'\n          ) {\n            candidates.push(option)\n          }\n        })\n\n        // Autocompletion resolved into one result\n        if (candidates.length === 1) {\n          const autocompleted = `${this.stdin.substring(0, pointer - 1)} -${\n            candidates[0]\n          }`\n          const rest = `${this.stdin.substring(this.cursor)}`\n\n          // Mutating Stdin mutates the cursor, so we've to wait to push it to the end\n          const unwatch = this.$watch(\n            () => this.cursor,\n            () => {\n              this.cursor =\n                cursor +\n                (candidates[0].length - autocompleteableStdin.length + 1)\n\n              unwatch()\n            }\n          )\n\n          this.stdin = `${autocompleted}${rest}`\n\n          return\n        }\n\n        // Autocompletion resolved into multiple result\n        if (autocompleteableStdin === '-' || candidates.length > 1) {\n          this.history.push({\n            // Build table programmatically\n            render: (createElement) => {\n              const columns = candidates.length < 5 ? candidates.length : 4\n              const rows =\n                candidates.length < 5\n                  ? 1\n                  : Math.ceil(candidates.length / columns)\n\n              let index = 0\n              const table = []\n              for (let i = 0; i < rows; i++) {\n                const row = []\n                for (let j = 0; j < columns; j++) {\n                  row.push(createElement('td', `-${candidates[index]}`))\n                  index++\n                }\n\n                table.push(createElement('tr', [row]))\n              }\n\n              return createElement('table', { style: { width: '100%' } }, [\n                table\n              ])\n            }\n          })\n        }\n      }\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\">\n* {\n  margin: 0;\n  padding: 0;\n}\nbody {\n  background: #002b36;\n\n  h1,\n  h2,\n  h3 {\n    font-family: \"Inconsolata\", monospace;\n  }\n\n  p {\n    color: #65888c;\n    font-size: 20px;\n    font-family: \"Montserrat\", sans-serif;\n  }\n\n  pre {\n    width: 100%;\n    padding: 0;\n    margin-top: 1em;\n    overflow: auto;\n    overflow-y: hidden;\n\n    code {\n      padding: 10px;\n      color: #333;\n      margin: 5px;\n    }\n  }\n\n  .vue-command {\n    .term-bar {\n      position: fixed;\n      -webkit-touch-callout: none;\n      -webkit-user-select: none;\n      -khtml-user-select: none;\n      -moz-user-select: none;\n      -ms-user-select: none;\n      user-select: none;\n    }\n\n    .term-std {\n      margin-top: 52px;\n      height: 100%;\n    }\n  }\n}\n::-webkit-scrollbar {\n  width: 8px;\n}\n\n::-webkit-scrollbar-track {\n  background: #252525;\n}\n\n::-webkit-scrollbar-thumb {\n  background: #f1f1f1;\n}\n\n::-webkit-scrollbar-thumb:hover {\n  background: #333;\n}\n</style>\n"]}]}